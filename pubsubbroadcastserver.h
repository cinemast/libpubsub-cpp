/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_PUBSUBBROADCASTSERVER_H_
#define JSONRPC_CPP_STUB_PUBSUBBROADCASTSERVER_H_

#include <jsonrpccpp/server.h>

class PubSubBroadcastServer : public jsonrpc::AbstractServer<PubSubBroadcastServer>
{
    public:
        PubSubBroadcastServer(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<PubSubBroadcastServer>(conn, type)
        {
            this->bindAndAddNotification(jsonrpc::Procedure("pubsub.publishinterest", jsonrpc::PARAMS_BY_NAME, "ip",jsonrpc::JSON_STRING,"topic",jsonrpc::JSON_STRING, NULL), &PubSubBroadcastServer::pubsub_publishinterestI);
            this->bindAndAddNotification(jsonrpc::Procedure("pubsub.publishtopics", jsonrpc::PARAMS_BY_NAME, "ip",jsonrpc::JSON_STRING,"topics",jsonrpc::JSON_ARRAY, NULL), &PubSubBroadcastServer::pubsub_publishtopicsI);
        }

        inline virtual void pubsub_publishinterestI(const Json::Value &request)
        {
            this->pubsub_publishinterest(request["ip"].asString(), request["topic"].asString());
        }
        inline virtual void pubsub_publishtopicsI(const Json::Value &request)
        {
            this->pubsub_publishtopics(request["ip"].asString(), request["topics"]);
        }
        virtual void pubsub_publishinterest(const std::string& ip, const std::string& topic) = 0;
        virtual void pubsub_publishtopics(const std::string& ip, const Json::Value& topics) = 0;
};

#endif //JSONRPC_CPP_STUB_PUBSUBBROADCASTSERVER_H_
