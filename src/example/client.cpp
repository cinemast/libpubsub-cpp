#include <pubsubcpp/pubsubpeer.h>

#define HUMIDITY_PUBLISH_TEMPCHANGED "tempChanged"

////Generated START
//class HumiditySensorPeer : public PubSubPeer
//{
//    public:
//        HumiditySensorPeer(const std::string &ip, int port) : PubSubPeer(ip, port)
//        {
//        }

//        void publishTempratureChanged(double temp)
//        {
//            Json::Value params;
//            params["temp"] = temp;
//            this->publishTopic(HUMIDITY_PUBLISH_TEMPCHANGED, params);
//        }
//};
////Generated END

/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_HUMIDITYSENSOR_H_
#define JSONRPC_CPP_STUB_HUMIDITYSENSOR_H_

#include <pubsubcpp/pubsubpeer.h>
#include <string>

class HumiditySensor : public PubSubPeer
{
    public:
        HumiditySensor(const std::string &ip, int port) : PubSubPeer(ip, port)
        {
        }

        void publishHumidityChanged(double humidity)
        {
            Json::Value p;
            p["humidity"] = humidity;
            this->publishTopic("humidityChanged", p);
        }

        //Topic Constants, use for registering publish/subscribe topics
        static constexpr const char* TOPIC_PUBLISH_HUMIDITYCHANGED = "humidityChanged";
};

#endif //JSONRPC_CPP_STUB_HUMIDITYSENSOR_H_


int main(int argc, char*argv[])
{
    HumiditySensor peer("192.168.13.78", 55555);

    peer.Start();

    peer.addPublishTopic(HumiditySensor::TOPIC_PUBLISH_HUMIDITYCHANGED);

    peer.publishHumidityChanged(34.3);

    peer.Stop();

}
